///
/// Default column width, all columns implemented with [column()](./#mixin-column) will have this width unless otherwise specified.
///
/// @since 0.1
///
/// @type {Number}
///

$column-width-default: 1/1 !default;

///
/// By default, columns are rendered as inline-blocks. Inline-block elements are much easier to implement than floating elements, but require the invisible space between elements to be minified or obscured.
/// If you can't minify your markup, then floated columns (or [negative right margin](./#variable-negative-right-margin)) will be helpful. You will have to implement your own clearfix method though.
///
/// @since 0.1
///
/// @type {Bool}
///

$column-float: false !default; // If you prefer floated columns instead of inline-blocks, set to true.
$column-float: false !default; // If you prefer floated columns instead of inline-blocks, set to true.


///
/// If you cannot minify your markup, you can assign a negative right margin to close gaps between columns to make them fit.
/// You can also set [$column-float](./#variable-column-float) to true to render your columns as floated blocks.  You will have to implement your own clearfix method though.
/// This is a hack and not necessary when your html (or column markup) is minimized.
/// @since 0.1
///
/// @type {Number}
///

$negative-right-margin: false !default;


///
/// The default line-height for your project. This is translated to the final unit of output using the [$line-height-unit](./#line-height-unit) variable.
///
/// @since 0.1
///
/// @type {Number}
///

$default-line-height: 24px !default;

// Rhythm settings

// Vertical measurements like line-height and %-top and %-bottom are factors of rhythm

///
/// This measure is used to calculare vertical measurements like line-height and top and bottom paddings and margins. It defaults to the $default-line-height but some prefer to set it to a smaller value, like 1/2 or 1/3 times the $default-line-height.
///
/// @since 0.1
///
/// @type {Number}
///

$rhythm: $default-line-height !default;

///
/// Gutter widths are based on the vertical [rhythm](./#variable-rhythm) and default to 2*$rhythm. Gutters are implemented using the [gutter mixin](./#mixin-gutters) and are expressed in factors of this measure (usually 1/2).
///
/// @since 0.1
///
/// @type {Number}
///

$gutter-width: 2*$rhythm !default;


///
/// The default line-height for your project. This is translated to the final unit of output using the [$line-height-unit](./#line-height-unit) variable.
///
/// @since 0.1
///
/// @type {Number}
///

$default-line-height: 24px !default;

///
/// Mixin column-behavior: prepares an element to behave as a column. Widths must be set separately with [column-width](./#mixin-column-width).
///
/// @since 0.1
///
/// @param {Bool} $column-float (false) - If true, render columns as left floated block element. If false, render as inline-blocks.
/// @param {Bool | Number} $negative-right-margin (false) - If set, applies a negative right margin to force inline-blocks to render without gaps. Only use this if you cannot minify your markup.
///

@mixin column-behavior($column-float: $column-float, $negative-right-margin: $negative-right-margin)
{
  @if $column-float {
    display: block;
    float: left;
  }
  @else {
    @include inline-block(top);
    @if $negative-right-margin {
      margin-right: $negative-right-margin !important;
    }
  }
}

// 1. FUNCTIONS

///
/// Expects a valid breakpoint expression like (min-width: 30em)
/// A collection of pre-defined breakpoints are defined in [settings/breakpoints](*). Override and add breakpoints in your project's settings file.
///
/// @example scss
///  $small_handheld: "(max-width: #{to-unit(480px,1em,16px)})";
///  @include breakpoint($small_handheld);
///
/// @access public
/// @since 0.1
///
/// @param {String} $breakpoints - A valid breakpoint
/// @param {Map} $media - The media to which this breakpoint applies
///
@mixin breakpoint($breakpoints, $media: "only screen")
{
  $breakpoints: unquote($breakpoints);

  $query: ();
  @if list-separator($breakpoints)=="comma" {
    @each $breakpoint in $breakpoints {
      $breakpoint: unquote($breakpoint);
      $query: append($query, $breakpoint, comma);
    }
  }
  @else {
    $query: append($query, $breakpoints, comma);
  }

  $q: "#{$media} and #{$query}";

  @media #{$q} {
    @content;
  }
}

///
/// Mixes in gutter properties. Gutters are declared inside the column (padding) by default, on both sides. Can be overridden to use margins instead, which is helpful when assigning backgrounds or borders
///
/// @since 0.1
///
/// @param {Number} $fraction (1/2) - A fraction, e.g. 1/2
/// @param {Bool} $use-margin (false) - If true, will render gutters outside the column using margins
///

@mixin gutters($fraction: 1/2, $use-margin: false)
{
  $both: length($fraction);

  $left: $fraction;
  $right: $fraction;

  @if $both > 1 {
    $left: nth($fraction,1);
    $right: nth($fraction,2);
  }

  @if ($use-margin) {
    @if $left != false {
      margin-left: $gutter-width * $left;
    }
    @if $right != false {
      margin-right: $gutter-width * $right;
    }
  }
  @else {
    @if $left != false {
      padding-left: $gutter-width * $left;
    }
    @if $right != false {
      padding-right: $gutter-width * $right;
    }
  }
}

///
/// Mixin to reverse padding on a container.
/// Use it to remove padded column spacing on columns, helpful when nesting columns and when applying backgrounds.
///
/// @since 0.1
///
/// @param {Number} $fraction (1/2) - A fraction, e.g. 1/2
///

@mixin bleed($fraction: -1/2)
{
  @include gutters($fraction, true);
}

///
/// Mixin column-width. If [$negative-right-margin]() is set, it will automatically remove if from columns that span the full width of their containers.
///
/// @since 0.1
///
/// @param {Number} $fraction (1/1) - A fraction, e.g. 1/2
///

@mixin column-width($fraction: $column-width-default)
{
  width: percentage($fraction);

  // Remove negative margin on elements that span full width of their container
  @if $fraction == 1/1 and $negative-right-margin {
    margin-right: 0;
  }
}